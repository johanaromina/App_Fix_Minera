// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id            String   @id @default(uuid())
  nombre        String
  email         String   @unique
  password_hash String
  activo        Boolean  @default(true)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  
  roles         UsuarioRol[]
  incidencias_reportadas Incidencia[] @relation("reporta")
  incidencias_atendidas  Incidencia[] @relation("atiende")
  movimientos   MovimientoInventario[]
  
  @@map("usuarios")
}

model Rol {
  id        Int    @id @default(autoincrement())
  nombre    String @unique
  descripcion String?
  created_at DateTime @default(now())
  
  usuarios UsuarioRol[]
  
  @@map("roles")
}

model UsuarioRol {
  usuarioId String
  rolId     Int
  created_at DateTime @default(now())
  
  usuario   Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  rol       Rol     @relation(fields: [rolId], references: [id], onDelete: Cascade)
  
  @@id([usuarioId, rolId])
  @@map("usuario_roles")
}

model Sitio {
  id          Int        @id @default(autoincrement())
  nombre      String
  descripcion String?
  lat         Decimal    @db.Decimal(10,6)
  lng         Decimal    @db.Decimal(10,6)
  activo      Boolean    @default(true)
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  
  incidencias Incidencia[]
  items       InventarioItem[]
  sensores    Sensor[]
  mantos      Mantenimiento[]
  
  @@map("sitios")
}

enum Prioridad { 
  baja 
  media 
  alta 
  critica 
}

enum EstadoIncidencia { 
  abierta 
  en_proceso 
  cerrada 
  cancelada 
}

enum EstadoItem { 
  operativo 
  fuera_de_servicio 
  mantenimiento 
  baja 
}

enum TipoMovimiento { 
  alta 
  baja 
  entrega 
  devolucion 
  transferencia 
}

enum Frecuencia { 
  diaria 
  semanal 
  mensual 
  trimestral 
  semestral 
  anual 
}

enum ResultadoManto { 
  ok 
  con_observaciones 
  pendiente 
  cancelado 
}

enum TipoSensor { 
  temperatura 
  vibracion 
  energia 
  presion 
  humedad 
  flujo 
}

enum NivelAlerta { 
  info 
  warning 
  critical 
}

model Incidencia {
  id             String          @id @default(uuid())
  titulo         String
  descripcion    String?
  prioridad      Prioridad
  estado         EstadoIncidencia @default(abierta)
  fecha_creacion DateTime         @default(now())
  fecha_cierre   DateTime?
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  
  usuario_reporta_id String
  usuario_atiende_id String?
  sitio_id       Int

  reporta  Usuario @relation("reporta", fields: [usuario_reporta_id], references: [id])
  atiende  Usuario? @relation("atiende", fields: [usuario_atiende_id], references: [id])
  sitio    Sitio   @relation(fields: [sitio_id], references: [id])
  anexos   AnexoIncidencia[]
  notifs   Notificacion[]
  alertaDe AlertaIoT?
  
  @@map("incidencias")
}

model AnexoIncidencia {
  id            String   @id @default(uuid())
  incidencia_id String
  ruta_archivo  String
  nombre_archivo String
  tipo_mime     String?
  tamaño        Int?
  created_at    DateTime @default(now())
  
  incidencia    Incidencia @relation(fields: [incidencia_id], references: [id], onDelete: Cascade)
  
  @@map("anexos_incidencias")
}

model InventarioItem {
  id        String    @id @default(uuid())
  sitio_id  Int
  tipo      String
  marca     String?
  modelo    String?
  nro_serie String?
  codigo_qr String    @unique
  estado    EstadoItem @default(operativo)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  sitio     Sitio     @relation(fields: [sitio_id], references: [id])
  movimientos MovimientoInventario[]
  mantos     Mantenimiento[]
  
  @@map("inventario_items")
}

model MovimientoInventario {
  id         String @id @default(uuid())
  item_id    String
  usuario_id String
  fecha      DateTime @default(now())
  tipo       TipoMovimiento
  observacion String?
  created_at DateTime @default(now())
  
  item       InventarioItem @relation(fields: [item_id], references: [id])
  usuario    Usuario       @relation(fields: [usuario_id], references: [id])
  
  @@map("movimientos_inventario")
}

model PlanMantenimiento {
  id         String @id @default(uuid())
  nombre     String
  descripcion String?
  frecuencia Frecuencia
  activo     Boolean @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  mantos     Mantenimiento[]
  
  @@map("planes_mantenimiento")
}

model Mantenimiento {
  id            String @id @default(uuid())
  plan_id       String
  sitio_id      Int
  item_id       String?
  fecha_plan    DateTime
  fecha_ejecucion DateTime?
  resultado     ResultadoManto @default(pendiente)
  observacion   String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  
  plan          PlanMantenimiento @relation(fields: [plan_id], references: [id])
  sitio         Sitio            @relation(fields: [sitio_id], references: [id])
  item          InventarioItem?  @relation(fields: [item_id], references: [id])
  
  @@map("mantenimientos")
}

model Sensor {
  id        String @id @default(uuid())
  sitio_id  Int
  tipo      TipoSensor
  descripcion String?
  activo    Boolean @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  sitio     Sitio   @relation(fields: [sitio_id], references: [id])
  lecturas  LecturaSensor[]
  alertas   AlertaIoT[]
  
  @@map("sensores")
}

model LecturaSensor {
  id        String   @id @default(uuid())
  sensor_id String
  timestamp DateTime @default(now())
  valor     Decimal  @db.Decimal(12,4)
  unidad    String
  created_at DateTime @default(now())
  
  sensor    Sensor   @relation(fields: [sensor_id], references: [id], onDelete: Cascade)
  
  @@map("lecturas_sensores")
}

model Notificacion {
  id            String   @id @default(uuid())
  incidencia_id String
  tipo          String
  destinatario  String
  mensaje       String?
  enviada       Boolean  @default(false)
  timestamp     DateTime @default(now())
  created_at    DateTime @default(now())
  
  incidencia    Incidencia @relation(fields: [incidencia_id], references: [id], onDelete: Cascade)
  
  @@map("notificaciones")
}

model AlertaIoT {
  id          String     @id @default(uuid())
  sensor_id   String
  tipo        String
  nivel       NivelAlerta
  timestamp   DateTime   @default(now())
  detalle     String?
  resuelta    Boolean    @default(false)
  incidencia_id String?   // si generó ticket preventivo
  created_at  DateTime   @default(now())
  
  sensor      Sensor     @relation(fields: [sensor_id], references: [id])
  incidencia  Incidencia? @relation(fields: [incidencia_id], references: [id])
  
  @@map("alertas_iot")
}
