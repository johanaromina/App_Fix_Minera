// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Usuarios {
  id            String   @id
  nombre        String
  email         String   @unique
  password_hash String
  activo        Boolean  @default(true)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relaciones
  roles                UsuarioRoles[]
  incidencias_reporta  Incidencias[] @relation("UsuarioReporta")
  incidencias_atiende  Incidencias[] @relation("UsuarioAtiende")
  movimientos_inventario MovimientosInventario[]

  @@map("usuarios")
}

model Roles {
  id          Int      @id @default(autoincrement())
  nombre      String   @unique
  descripcion String?
  created_at  DateTime @default(now())

  // Relaciones
  usuarios UsuarioRoles[]

  @@map("roles")
}

model UsuarioRoles {
  usuarioId String
  rolId     Int
  created_at DateTime @default(now())

  usuario Usuarios @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  rol     Roles    @relation(fields: [rolId], references: [id], onDelete: Cascade)

  @@id([usuarioId, rolId])
  @@map("usuario_roles")
}

model Sitios {
  id          Int      @id @default(autoincrement())
  nombre      String   @unique
  descripcion String?
  lat         Decimal  @db.Decimal(10, 6)
  lng         Decimal  @db.Decimal(10, 6)
  activo      Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relaciones
  incidencias        Incidencias[]
  inventario_items   InventarioItems[]
  mantenimientos     Mantenimientos[]
  sensores           Sensores[]

  @@map("sitios")
}

model Incidencias {
  id                String   @id
  titulo            String
  descripcion       String?
  prioridad         Prioridad
  estado            Estado   @default(abierta)
  fecha_creacion    DateTime @default(now())
  fecha_cierre      DateTime?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  usuario_reporta_id String
  usuario_atiende_id String?
  sitio_id          Int

  // Relaciones
  usuario_reporta Usuarios @relation("UsuarioReporta", fields: [usuario_reporta_id], references: [id])
  usuario_atiende Usuarios? @relation("UsuarioAtiende", fields: [usuario_atiende_id], references: [id])
  sitio           Sitios   @relation(fields: [sitio_id], references: [id])
  anexos          AnexosIncidencias[]
  notificaciones  Notificaciones[]
  alertas_iot     AlertasIot[]

  @@map("incidencias")
}

model AnexosIncidencias {
  id            String   @id
  incidencia_id String
  ruta_archivo  String
  nombre_archivo String
  tipo_mime     String?
  tamano        Int?
  created_at    DateTime @default(now())

  // Relaciones
  incidencia Incidencias @relation(fields: [incidencia_id], references: [id], onDelete: Cascade)

  @@map("anexos_incidencias")
}

model InventarioItems {
  id         String   @id
  sitio_id   Int
  tipo       String
  marca      String?
  modelo     String?
  nro_serie  String?
  codigo_qr  String   @unique
  estado     EstadoItem @default(operativo)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relaciones
  sitio      Sitios                @relation(fields: [sitio_id], references: [id])
  movimientos MovimientosInventario[]
  mantenimientos Mantenimientos[]

  @@map("inventario_items")
}

model MovimientosInventario {
  id          String      @id
  item_id     String
  usuario_id  String
  fecha       DateTime    @default(now())
  tipo        TipoMovimiento
  observacion String?
  created_at  DateTime    @default(now())

  // Relaciones
  item    InventarioItems @relation(fields: [item_id], references: [id])
  usuario Usuarios        @relation(fields: [usuario_id], references: [id])

  @@map("movimientos_inventario")
}

model PlanesMantenimiento {
  id          String      @id
  nombre      String
  descripcion String?
  frecuencia  Frecuencia
  activo      Boolean     @default(true)
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt

  // Relaciones
  mantenimientos Mantenimientos[]

  @@map("planes_mantenimiento")
}

model Mantenimientos {
  id              String        @id
  plan_id         String
  sitio_id        Int
  item_id         String?
  fecha_plan      DateTime
  fecha_ejecucion DateTime?
  resultado       Resultado     @default(pendiente)
  observacion     String?
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt

  // Relaciones
  plan  PlanesMantenimiento @relation(fields: [plan_id], references: [id])
  sitio Sitios              @relation(fields: [sitio_id], references: [id])
  item  InventarioItems?    @relation(fields: [item_id], references: [id])

  @@map("mantenimientos")
}

model Sensores {
  id          String    @id
  sitio_id    Int
  tipo        TipoSensor
  descripcion String?
  activo      Boolean   @default(true)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  // Relaciones
  sitio     Sitios           @relation(fields: [sitio_id], references: [id])
  lecturas  LecturasSensores[]
  alertas   AlertasIot[]

  @@map("sensores")
}

model LecturasSensores {
  id        String   @id
  sensor_id String
  timestamp DateTime @default(now())
  valor     Decimal  @db.Decimal(12, 4)
  unidad    String
  created_at DateTime @default(now())

  // Relaciones
  sensor Sensores @relation(fields: [sensor_id], references: [id], onDelete: Cascade)

  @@map("lecturas_sensores")
}

model Notificaciones {
  id           String   @id
  incidencia_id String
  tipo         String
  destinatario String
  mensaje      String?
  enviada      Boolean  @default(false)
  timestamp    DateTime @default(now())
  created_at   DateTime @default(now())

  // Relaciones
  incidencia Incidencias @relation(fields: [incidencia_id], references: [id], onDelete: Cascade)

  @@map("notificaciones")
}

model AlertasIot {
  id           String    @id
  sensor_id    String
  tipo         String
  nivel        NivelAlerta
  timestamp    DateTime  @default(now())
  detalle      String?
  resuelta     Boolean   @default(false)
  incidencia_id String?
  created_at   DateTime  @default(now())

  // Relaciones
  sensor     Sensores    @relation(fields: [sensor_id], references: [id])
  incidencia Incidencias? @relation(fields: [incidencia_id], references: [id])

  @@map("alertas_iot")
}

// Enums
enum Prioridad {
  baja
  media
  alta
  critica
}

enum Estado {
  abierta
  en_proceso
  cerrada
  cancelada
}

enum EstadoItem {
  operativo
  fuera_de_servicio
  mantenimiento
  baja
}

enum TipoMovimiento {
  alta
  baja
  entrega
  devolucion
  transferencia
}

enum Frecuencia {
  diaria
  semanal
  mensual
  trimestral
  semestral
  anual
}

enum Resultado {
  ok
  con_observaciones
  pendiente
  cancelado
}

enum TipoSensor {
  temperatura
  vibracion
  energia
  presion
  humedad
  flujo
}

enum NivelAlerta {
  info
  warning
  critical
}
